
from pymol.cgo import *
from pymol import cmd
import numpy as np
from chempy.brick import Brick
from collections import defaultdict
positions_viewport_callbacks = defaultdict(lambda: defaultdict(lambda: ViewportCallback([],0,0)))


Points_1 = [
        
COLOR,1.0,0.0,0.0,1.0,SPHERE,0.0,0.0,0.0,0.5,COLOR,1.0,0.0,0.0,1.0,SPHERE,1.0,1.0,1.0,0.5,COLOR,1.0,0.0,0.0,1.0,SPHERE,2.0,1.0,2.0,0.5

            ]
cmd.load_cgo(Points_1, "Points_1", state=1)
cmd.set("cgo_transparency", 0, "Points_1")
        

iterp_grid_data = np.array([[[3.46410162,3.        ,2.82842712,3.        ,3.46410162,4.12310563],
  [3.        ,2.44948974,2.23606798,2.44948974,3.        ,3.74165739],
  [2.82842712,2.23606798,2.        ,2.23606798,2.82842712,3.60555128],
  [3.        ,2.44948974,2.23606798,2.44948974,3.        ,3.60555128],
  [3.46410162,3.        ,2.82842712,3.        ,3.31662479,3.74165739]],

 [[3.        ,2.44948974,2.23606798,2.44948974,3.        ,3.74165739],
  [2.44948974,1.73205081,1.41421356,1.73205081,2.44948974,3.31662479],
  [2.23606798,1.41421356,1.        ,1.41421356,2.23606798,3.        ],
  [2.44948974,1.73205081,1.41421356,1.73205081,2.23606798,2.82842712],
  [3.        ,2.44948974,2.23606798,2.23606798,2.44948974,3.        ]],

 [[2.82842712,2.23606798,2.        ,2.23606798,2.82842712,3.60555128],
  [2.23606798,1.41421356,1.        ,1.41421356,2.23606798,3.        ],
  [2.        ,1.        ,0.        ,1.        ,1.73205081,2.44948974],
  [2.23606798,1.41421356,1.        ,1.        ,1.41421356,2.23606798],
  [2.82842712,2.23606798,1.73205081,1.41421356,1.73205081,2.44948974]],

 [[3.        ,2.44948974,2.23606798,2.44948974,3.        ,3.31662479],
  [2.44948974,1.73205081,1.41421356,1.73205081,2.23606798,2.44948974],
  [2.23606798,1.41421356,1.        ,1.        ,1.41421356,1.73205081],
  [2.44948974,1.73205081,1.        ,0.        ,1.        ,1.41421356],
  [3.        ,2.23606798,1.41421356,1.        ,1.41421356,1.73205081]],

 [[3.46410162,3.        ,2.82842712,3.        ,3.        ,3.16227766],
  [3.        ,2.44948974,2.23606798,2.23606798,2.        ,2.23606798],
  [2.82842712,2.23606798,1.73205081,1.41421356,1.        ,1.41421356],
  [3.        ,2.23606798,1.41421356,1.        ,0.        ,1.        ],
  [3.31662479,2.44948974,1.73205081,1.41421356,1.        ,1.41421356]],

 [[4.12310563,3.74165739,3.60555128,3.31662479,3.16227766,3.31662479],
  [3.74165739,3.31662479,3.        ,2.44948974,2.23606798,2.44948974],
  [3.60555128,3.        ,2.44948974,1.73205081,1.41421356,1.73205081],
  [3.60555128,2.82842712,2.23606798,1.41421356,1.        ,1.41421356],
  [3.74165739,3.        ,2.44948974,1.73205081,1.41421356,1.73205081]]])
iterp_grid = Brick.from_numpy(iterp_grid_data, [1.,1.,1.], origin=[-2.,-2.,-2.])
cmd.load_brick(iterp_grid, "iterp_grid")
cmd.set("volume_mode", 0)
cmd.set_object_ttt("iterp_grid", [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])
iterp_grid_data = None



cmd.isosurface("iterp_surface", "iterp_grid", 1, selection = "", side = 1)
cmd.set_color("iterp_surface_color", [1, 1, 1])
cmd.color("iterp_surface_color", "iterp_surface")

cmd.set("transparency", 0, "iterp_surface")
        

iterptest = cmd.group("iterptest")
cmd.group("iterptest", "open")

cmd.group("iterptest", "Points_1", "add"),
cmd.group("iterptest", "iterp_surface", "add")

for x in positions_viewport_callbacks:
    for y in positions_viewport_callbacks[x]:
        positions_viewport_callbacks[x][y].load()
